DIGITS = range(61, 81)
SEEDS = ('042', '069', '151', '401', '404')
TIME = range(0, 30)
from glob import glob


rule all:
    input:
        # "analysis/plots/mrxcat_simulation/features_curves/top12_features.png",
        # "analysis/plots/mrxcat_simulation/total_mae_vs_snr_mae.png",
        # "analysis/plots/mrxcat_simulation/total_mae_vs_snr_mae_1.png",
        # "analysis/plots/mrxcat_simulation/rank_barcode.png",
        # expand("analysis/feature_extraction/ACDC/patient0{digits}/",
        #        digits = DIGITS),
        # expand("analysis/feature_extraction/ACDC/patient0{digits}/",
        #        digits = DIGITS),
        expand("aggregated/{digits}.txt",
               digits = DIGITS)

# include: "rules/simulation.smk", "rules/ACDC.smk"

checkpoint SplitSlices:
    input:
        "data/ACDC_dataset/data/patient0{digits}/patient0{digits}_4d.nii.gz", 
        "data/ACDC_dataset/masks/patient0{digits}/pat0{digits}_masks_4d.nii.gz"
    output:
        directory("analysis/feature_extraction/ACDC/patient0{digits}"),
    params:
        "0"
    conda:
        "split.yaml"
    script:
        "../code/seperate_slices.py"


def aggregate_input(wildcards):
    # decision based on content of output file
    # Important: use the method open() of the returned file!
    # This way, Snakemake is able to automatically download the file if it is generated in
    # a cloud environment without a shared filesystem.
    dir = checkpoints.SplitSlices.get(digits=wildcards.digits).output[0]
    return glob(f"{dir}/*/*")
        
rule aggregate:
    input:
        aggregate_input
    output:
        "aggregated/{digits}.txt"
    shell:
        "echo {input} > {output}"
